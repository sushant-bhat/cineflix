PROJECT SETUP
1.

UPLOADING VIDEO
1. SAVING VIDEO METADATA INTO A DB (SQL OR NO-SQL)
=> Normalization of video metadata
=> Lazy vs Eager loading of array type fields
=> Limitations of Hibernate - The infamous MultipleBagFetchException and N+1 problem

2. VIDEO TRANSCODING
=> Video formats/containers - Package of different streams (video stream, audio stream, subtitles stream) of a video, Ex - mp4, avi etc
=> Encoding - Compressing video files
=> Decoding - Decompressing compressed video files
=> Demuxing - Separating out the streams of a video container
=> Muxing - Combining the streams of a video into a container
=> Video filtering of scaling the input video to different resolutions using different bitrates
=> The different resolutions videos can also be chunked into segments right at the start while scaling and stored
=> There's a master file that maps the segment data according to the resolutions
    =>
=> HLS and DASH are two popular formats for segmenting and creating master file
=> Third party software like FFMPEG can be used that does all the above

STREAMING VIDEO
=> Chunking a video resource using input stream if there's a single video resource to be streamed
=> Browsers automatically support chunked video requests in video player sending range header to BE
=> We can also serve the aformentioned video segments with adaptive streaming
=> Video players also support master file request and subsequent segment file requests in FE

SECURITY (AUTHORIZATION & AUTHENTICATION)
=> Best source to explain spring security: https://www.youtube.com/watch?v=caCJAJC41Rk&ab_channel=JavaBrains
=> When you add spring security dependency to the project, spring automatically configures a basic authentication in SpringBootWebSecurityConfiguration
=> The username and password provided is Base64 encoded in the format username:password and sent to BE for verification in the case above
=> Only 1 user can be configured using the basic auth
=> CSRF stands for Cross-Site Request Forgery.
    => It’s a security attack where a malicious website tricks your browser into sending an unwanted request (like POST/PUT/DELETE) to your app where you're already logged in.
    => To prevent this, Spring Security automatically protects all state-changing requests (POST, PUT, DELETE, PATCH) by expecting a valid CSRF token with each request.
=> You get 401 forbidden when server doesn't recognise someone (authentication failure) and 403 forbidden when server recognises someone, but they don't have the required permission (authorization failure)
=> Most sites use one way encryption (hashing) to store passwords, so even the application doesn't have access to original password,
    this is why most sites will tell you to set a new password instead of recovering the old one
=> If you put authorization check on registering new users, you can end up in a deadlock as there are no users in the system initially
    and you can't add users without admin user credentials.
    => We can either seed the user DB with an initial admin user or
    => Allow open registration with strong controls: Use email verification and CAPTCHA.
=> To ensure reliant safe message from A to B:
    => A will first encrypt message with B's public key - EM
    => A will then encrypt this EM again with its own private key - EEM
    => When B receives this EEM, it will first decrypt it with A's public key and get EM
    => Then B decrypts this EM further using its own private key to get the original message
    => If some hacker intercepts this EEM in between, the hacker can decrypt it using A's public key but it will only get the encrypted message EM

RATE LIMITING
=>